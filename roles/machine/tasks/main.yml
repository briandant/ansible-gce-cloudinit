---
# Notes
# # These tasks run on localhost
# See: https://cloud.google.com/container-optimized-os/docs
# and: https://cloud.google.com/container-optimized-os/docs/how-to/create-configure-instance#gcloud
# and: https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.html
# and: https://docs.ansible.com/ansible/latest/collections/google/cloud/index.html
# and an example here: https://stackoverflow.com/a/61498969/785400
# TODO: we need to enable the compute engine API manually for the project; can we get around that?
# TODO: must create project owner manually, or add the person running this as a project owner
# TODO: the IAM API needed to be enabled by hand
# https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_instance_module.html#ansible-collections-google-cloud-gcp-compute-instance-module

# We create a service account that can build machine.
# This requires that your Google account has owner permissions on the project
# in deploy/ansible_vars/base.yml#gcp_project.
# TODO: We should change this to work with org-level service accounts and
# store that org-level's key in our vault.  This way, the vault key allows
# access to create machines (but that vault key should be seperate from other
# vault keys that allow deployment only, not machine creation).
# TODO: Create a custom role that properly scopes the needs of this user; his
# role scope is too wide.

# To push images to the registry and execute the tasks below, we
# need to enable the "registry" and "compute" APIs.
- name: enable the requisite APIs
  local_action:
    module: ansible.builtin.shell
    cmd: gcloud services enable {{ item }} --project {{ gcp_project }}
  ignore_errors: false
  with_items: "{{ gcp_apis }}"
  tags: ['machine', 'machine:apis']

- name: create the machine-building service account
  local_action:
    module: google.cloud.gcp_iam_service_account
    name: "{{ gcp_createmachine_user_email }}"
    display_name: "{{ gcp_project }} machine user: {{ gcp_createmachine_user_name }}"
    project: "{{ gcp_project }}"
    # We assume that you're authenticated with the gcloud CLI.
    auth_kind: application
    state: present
  register: machine_serviceaccount
  tags: ['machine', 'machine:machine_serviceaccount']

- name: give this machine-building user permission to create machines
  local_action:
    module: ansible.builtin.shell
    cmd: >
      gcloud projects add-iam-policy-binding {{ gcp_project }}
      --member=serviceAccount:{{ gcp_createmachine_user_email }}
      --role={{ item }}
  ignore_errors: false
  with_items: "{{ gcp_createmachine_user_roles }}"
  tags: ['machine', 'machine:machine_serviceaccount']

- name: delete the IAM key for the machine-building account, if it exists
  local_action:
    module: ansible.builtin.file
    path: "{{ gcp_createmachine_user_keyfile }}"
    state: absent
  tags: ['machine', 'machine:machine_serviceaccount']

- name: get an IAM key for the machine-building account
  local_action:
    module: google.cloud.gcp_iam_service_account_key
    service_account: "{{ machine_serviceaccount }}"
    private_key_type: TYPE_GOOGLE_CREDENTIALS_FILE
    path: "{{ gcp_createmachine_user_keyfile }}"
    project: "{{ gcp_project }}"
    auth_kind: application
    state: present
  tags: ['machine', 'machine:machine_serviceaccount']

- name: create a disk
  local_action:
    module:  google.cloud.gcp_compute_disk
    name: "{{ gcp_instance_name }}-disk"
    size_gb: 50
    source_image: "projects/{{ gcp_image_project }}/global/images/family/{{ gcp_image_family }}"
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_createmachine_user_keyfile }}"
    state: present
  register: disk
  tags: ['machine', 'machine:disk']

- name: create a network
  local_action:
    module: google.cloud.gcp_compute_network
    name: "{{ gcp_instance_name }}-network"
    auto_create_subnetworks: 'true'
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_createmachine_user_keyfile }}"
    state: present
  register: network
  tags: ['machine', 'machine:network']

- name: open port 22 for ssh
  local_action:
    module: google.cloud.gcp_compute_firewall
    name: dataexchange-allow-ssh
    allowed:
    - ip_protocol: tcp
      ports:
      - '22'
    network: "{{ network }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_createmachine_user_keyfile }}"
    state: present
  tags: ['machine', 'machine:firewall']

- name: create an address
  local_action:
    module: google.cloud.gcp_compute_address
    name: "{{ gcp_instance_name }}-address"
    region: "{{ gcp_region }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_createmachine_user_keyfile }}"
    state: present
  register: address
  tags: ['machine', 'machine:address']

- name: create an instance
  local_action:
    module: google.cloud.gcp_compute_instance
    name: "{{ gcp_instance_name }}"
    machine_type: "{{ gcp_machine_type }}"
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    # Authentication for the request to create the machine.
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_createmachine_user_keyfile }}"
    # https://developers.google.com/identity/protocols/oauth2/scopes
    # We don't set scopes on the instance, because the machine will
    # have the default scopes, which allow us to do what we need to do.
    # scopes: N/A
    #
    # The service account to assign to this machine.
    # See: https://cloud.google.com/iam/docs/service-accounts#default
    service_accounts:
      - email: "{{ gcp_default_service_account }}"
        scopes: "{{ gcp_default_service_account_scopes }}"
    network_interfaces:
    - network: "{{ network }}"
      access_configs:
      - name: External NAT
        nat_ip: "{{ address }}"
        type: ONE_TO_ONE_NAT
    disks:
    - auto_delete: 'true'
      boot: 'true'
      source: "{{ disk }}"
    state: present
  tags: ['machine', 'machine:create']

  # - name: create the deploy service account
  #   local_action:
  #  module: google.cloud.gcp_iam_service_account
  #  name: "{{ gcp_deploy_service_account_email }}"
  #  display_name: "{{ gcp_project }} machine user: {{ gcp_deploy_user }}"
  #  project: "{{ gcp_project }}"
  #  auth_kind: serviceaccount
  #  service_account_file: "{{ gcp_createmachine_user_keyfile }}"
  #  state: present
  #   register: deploy_serviceaccount
  #   tags: ['instance', 'instance:deploy_serviceeaccount']

  # - name: get an IAM key for the service account
  #   local_action:
  #  module: google.cloud.gcp_iam_service_account_key
  #  service_account: "{{ deploy_serviceaccount }}"
  #  private_key_type: TYPE_GOOGLE_CREDENTIALS_FILE
  #  path: "{{ gcp_deploy_service_account_file }}"
  #  project: "{{ gcp_project }}"
  #  scopes: "{{ gcp_deploy_user_scopes }}"
  #  auth_kind: serviceaccount
  #  service_account_file: "{{ gcp_createmachine_user_keyfile }}"
  #  state: present
  #   tags: ['instance', 'instance:deploy_serviceaccount']
